//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table categories {
  id String [pk]
  name String [unique, not null]
  icon String
  parentCategoryId String
  parentCategory categories
  subCategories categories [not null]
  products products [not null]
}

Table users {
  id String [pk]
  firstName String
  lastName String
  email String [unique, not null]
  age Int
  avatar String
  phone String
  password String [not null]
  dob DateTime
  gender String
  school String
  background String
  workAt String
  address String
  pageId String
  comments comments [not null]
  receiverFriendRequest friend_requests [not null]
  senderFriendRequest friend_requests [not null]
  users friend_ship [not null]
  userOfs friend_ship [not null]
  joinedGroups group_members [not null]
  groupsRoles group_roles [not null]
  ownedGroups groups [not null]
  likes likes [not null]
  posts posts [not null]
  shortCuts short_cuts [not null]
  stories stories [not null]
  page pages
  userRoles user_roles [not null]
}

Table permissions {
  id String [pk]
  name String [unique, not null]
  rolePermissions role_permissions [not null]
}

Table roles {
  id String [pk]
  name String [unique, not null]
  rolePermissions role_permissions [not null]
  userRoles user_roles [not null]
}

Table role_permissions {
  roleId String [not null]
  permissionId String [not null]
  role roles [not null]
  permission permissions [not null]

  indexes {
    (roleId, permissionId) [pk]
  }
}

Table user_roles {
  userId String [not null]
  roleId String [not null]
  user users [not null]
  role roles [not null]

  indexes {
    (userId, roleId) [pk]
  }
}

Table short_cuts {
  id String [pk]
  groupId String [not null]
  userId String [not null]
  group groups [not null]
  user users [not null]
}

Table friend_requests {
  id String [pk]
  senderId String [not null]
  receiverId String [not null]
  status FriendStatus [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  receiver users [not null]
  sender users [not null]
}

Table friend_ship {
  id String [pk]
  userId String [not null]
  userOfId String [not null]
  friendSince DateTime [default: `now()`, not null]
  user users [not null]
  userOf users [not null]
}

Table stories {
  id String [pk]
  userId String
  content String
  media String[] [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  user users
}

Table pages {
  id String [pk]
  name String [not null]
  description String
  avatar String
  cover String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  posts posts [not null]
  followers users [not null]
}

Table posts {
  id String [pk]
  userId String
  content String
  location String
  media Json
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  publishType PublishType [not null, default: 'PUBLIC']
  isDeleted Boolean [not null, default: false]
  pageId String
  comments comments [not null]
  likes likes [not null]
  page pages
  user users
}

Table comments {
  id String [pk]
  userId String [not null]
  postId String [not null]
  content String [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  media Json
  post posts [not null]
  user users [not null]
}

Table likes {
  id String [pk]
  userId String [not null]
  postId String [not null]
  type TypeOfLike [not null]
  post posts [not null]
  user users [not null]
}

Table products {
  id String [pk]
  categoryId String [not null]
  name String
  price Int
  description String
  location String
  images Json
  category categories [not null]
}

Table groups {
  id String [pk]
  name String [unique, not null]
  ownerId String [not null]
  type TypeOfGroup [not null]
  background String
  avatar String
  createdAt DateTime [default: `now()`, not null]
  userId String
  members group_members [not null]
  rolesOnGroups group_roles [not null]
  owner users [not null]
  shortCuts short_cuts [not null]
}

Table group_roles {
  userId String [not null]
  groupId String [not null]
  role RoleOnGroup [not null]
  group groups [not null]
  user users [not null]

  indexes {
    (userId, groupId) [pk]
  }
}

Table group_members {
  memberId String [not null]
  groupId String [not null]
  group groups [not null]
  member users [not null]

  indexes {
    (memberId, groupId) [pk]
  }
}

Enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

Enum PublishType {
  PUBLIC
  FRIENDS
  FRIENDS_EXCEPT
  ONLY_ME
  SPECIFIC_FRIENDS
  CUSTOM
}

Enum RoleOnGroup {
  ADMIN
  MOD
  MEMBER
}

Enum TypeOfGroup {
  PUBLIC
  PRIVATE
}

Enum TypeOfLike {
  LIKE
  LOVE
  CARE
  HAHA
  WOW
  SAD
  ANGRY
}

Ref: categories.parentCategoryId - categories.id

Ref: users.pageId > pages.id

Ref: role_permissions.roleId > roles.id

Ref: role_permissions.permissionId > permissions.id

Ref: user_roles.userId > users.id

Ref: user_roles.roleId > roles.id

Ref: short_cuts.groupId > groups.id

Ref: short_cuts.userId > users.id

Ref: friend_requests.receiverId > users.id

Ref: friend_requests.senderId > users.id

Ref: friend_ship.userId > users.id

Ref: friend_ship.userOfId > users.id

Ref: stories.userId > users.id

Ref: posts.pageId > pages.id

Ref: posts.userId > users.id

Ref: comments.postId > posts.id

Ref: comments.userId > users.id

Ref: likes.postId > posts.id

Ref: likes.userId > users.id

Ref: products.categoryId > categories.id [delete: Cascade]

Ref: groups.ownerId > users.id

Ref: group_roles.groupId > groups.id

Ref: group_roles.userId > users.id

Ref: group_members.groupId > groups.id

Ref: group_members.memberId > users.id